#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <EEPROM.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Paddle settings
const int PADDLE_WIDTH = 2;
const int PADDLE_HEIGHT = 16;
const int PLAYER1_X = 2;
const int PLAYER2_X = SCREEN_WIDTH - 4;

// Ball
int ballX = SCREEN_WIDTH / 2;
int ballY = SCREEN_HEIGHT / 2;
int ballDX = 1;
int ballDY = 1;
const int BALL_SIZE = 3;

// Ball speed control
int ballSpeed = 10;
const int minBallSpeed = 2;

// Potentiometers
const int pot1 = A0;
const int pot2 = A1;

// Buttons
const int resetButtonPin = 2;
const int pauseButtonPin = 3;
bool paused = false;
bool pausePressed = false;

// Scores
int score1 = 0;
int score2 = 0;
bool gameOver = false;

// EEPROM High Score
int highScoreDiff = 0;

void setup() {
  pinMode(resetButtonPin, INPUT_PULLUP);
  pinMode(pauseButtonPin, INPUT_PULLUP);

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();

  splashScreen(); // âš¡ Intro animation

  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.display();

  highScoreDiff = EEPROM.read(0);
}

void loop() {
  // RESET BUTTON
  if (digitalRead(resetButtonPin) == LOW) {
    score1 = 0;
    score2 = 0;
    gameOver = false;
    resetBall(true); // Force countdown
    delay(1000);
  }
  // PAUSE TOGGLE
  if (digitalRead(pauseButtonPin) == LOW && !pausePressed) {
    paused = !paused;
    pausePressed = true;
    delay(200);
  }
  if (digitalRead(pauseButtonPin) == HIGH) {
    pausePressed = false;
  }

  // GAME OVER
  if (gameOver) {
    display.clearDisplay();
    display.setCursor(20, 10);
    display.setTextSize(1);

    if (score1 > score2) {
      display.print("Player 1 Wins!");
    } else {
      display.print("Player 2 Wins!");
    }

    display.setCursor(10, 25);
    display.print("Press RESET to play");

    display.setCursor(10, 40);
    display.print("High Score Diff: ");
    display.print(highScoreDiff);

    display.display();
    delay(100);
    return;
  }

  if (paused) {
    display.clearDisplay();
    display.setCursor(45, 28);
    display.print("PAUSED");
    display.display();
    delay(100);
    return;
  }

  display.clearDisplay();

  // READ POTS
  int p1_raw = (analogRead(pot1) + analogRead(pot1)) / 2;
  int p2_raw = (analogRead(pot2) + analogRead(pot2)) / 2;

  int p1Y = map(p1_raw, 0, 1023, 0, SCREEN_HEIGHT - PADDLE_HEIGHT);
  int p2Y = map(p2_raw, 0, 1023, 0, SCREEN_HEIGHT - PADDLE_HEIGHT);

  p1Y = constrain(p1Y, 0, SCREEN_HEIGHT - PADDLE_HEIGHT);
  p2Y = constrain(p2Y, 0, SCREEN_HEIGHT - PADDLE_HEIGHT);

  // DRAW
  display.fillRect(PLAYER1_X, p1Y, PADDLE_WIDTH, PADDLE_HEIGHT, SSD1306_WHITE);
  display.fillRect(PLAYER2_X, p2Y, PADDLE_WIDTH, PADDLE_HEIGHT, SSD1306_WHITE);
  display.fillRect(ballX, ballY, BALL_SIZE, BALL_SIZE, SSD1306_WHITE);

  // MOVE BALL
  ballX += ballDX;
  ballY += ballDY;

  if (ballY <= 0 || ballY >= SCREEN_HEIGHT - BALL_SIZE) ballDY *= -1;

  // PADDLE COLLISIONS
  if (ballX <= PLAYER1_X + PADDLE_WIDTH &&
      ballY + BALL_SIZE >= p1Y && ballY <= p1Y + PADDLE_HEIGHT) {
    ballDX *= -1;
    ballX = PLAYER1_X + PADDLE_WIDTH + 1;
    increaseSpeed();
  }

  if (ballX + BALL_SIZE >= PLAYER2_X &&
      ballY + BALL_SIZE >= p2Y && ballY <= p2Y + PADDLE_HEIGHT) {
    ballDX *= -1;
    ballX = PLAYER2_X - BALL_SIZE - 1;
    increaseSpeed();
  }

  // SCORE CHECK
  if (ballX < 0) {
    score2++;
    if (checkWin()) gameOver = true;
    else resetBall(false);
  } else if (ballX > SCREEN_WIDTH) {
    score1++;
    if (checkWin()) gameOver = true;
    else resetBall(false);
  }

  // SCORE DISPLAY
  display.setTextSize(1);
  display.setCursor(20, 0);
  display.print("P1:");
  display.print(score1);
  display.setCursor(70, 0);
  display.print("P2:");
  display.print(score2);

  display.display();
  delay(ballSpeed);
}

void resetBall(bool forceCountdown) {
  ballX = SCREEN_WIDTH / 2;
  ballY = SCREEN_HEIGHT / 2;
  ballDX = (random(0, 2) == 0) ? -1 : 1;
  ballDY = (random(0, 2) == 0) ? -1 : 1;
  ballSpeed = 10;

  if (forceCountdown || (score1 > 0 && score1 % 5 == 0) || (score2 > 0 && score2 % 5 == 0)) {
    countdown();
  }

  delay(500);
}

void increaseSpeed() {
  if (ballSpeed > minBallSpeed) ballSpeed--;
}

bool checkWin() {
  int diff = abs(score1 - score2);
  if ((score1 >= 11 || score2 >= 11) && diff >= 2) {
    if (diff > highScoreDiff) {
      highScoreDiff = diff;
      EEPROM.write(0, highScoreDiff);
    }
    return true;
  }
  return false;
}

void countdown() {
  for (int i = 3; i > 0; i--) {
    display.clearDisplay();
    display.setTextSize(5);
    display.setCursor(50, 20);
    display.print(i);
    display.display();
    delay(1000);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.display();
}

void splashScreen() {
  display.clearDisplay();
  display.display();

  // Slide paddles
  for (int i = 0; i <= 16; i++) {
    display.clearDisplay();
    display.fillRect(PLAYER1_X, i, PADDLE_WIDTH, PADDLE_HEIGHT, SSD1306_WHITE);
    display.fillRect(PLAYER2_X, SCREEN_HEIGHT - i - PADDLE_HEIGHT, PADDLE_WIDTH, PADDLE_HEIGHT, SSD1306_WHITE);
    display.display();
    delay(50);
  }

  // PONG title
  display.clearDisplay();
  display.setTextSize(4);
  display.setCursor(20, 15);
  display.print("PONG");
  display.display();
  delay(1000);

  // Ball bounce demo
  int bx = 64, by = 32, dx = 2, dy = 1;
  for (int i = 0; i < 30; i++) {
    display.clearDisplay();
    display.fillRect(PLAYER1_X, 16, PADDLE_WIDTH, PADDLE_HEIGHT, SSD1306_WHITE);
    display.fillRect(PLAYER2_X, 32, PADDLE_WIDTH, PADDLE_HEIGHT, SSD1306_WHITE);
    display.fillRect(bx, by, BALL_SIZE, BALL_SIZE, SSD1306_WHITE);
    display.display();
    bx += dx; by += dy;
    if (by <= 0 || by >= SCREEN_HEIGHT - BALL_SIZE) dy *= -1;
    if (bx <= PLAYER1_X + PADDLE_WIDTH || bx >= PLAYER2_X - BALL_SIZE) dx *= -1;
    delay(30);
  }

  // Flash "Get Ready!"
  for (int i = 0; i < 3; i++) {
    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(20, 25);
    display.print("Get Ready!");
    display.display();
    delay(400);
    display.clearDisplay();
    display.display();
    delay(300);
  }
}

